blueprint:
  name: Auto Light 3
  description: Turn a light on based on detected motion or a door opening.
  domain: automation
  input:
    motion_sensors:
      name: Motion Sensors
      description: List of motion sensors to use
      selector:
        entity:
          multiple: true
          domain: binary_sensor
          device_class: motion
    timer:
      name: Timer
      description: Timer object to use
      selector:
        entity:
          domain: timer
    door_sensors:
      name: Door Sensors
      description: List of door sensors to use
      selector:
        entity:
          multiple: true
          domain: binary_sensor
          device_class: door
    lights:
      name: Lights
      description: List of lights to turn on
      selector:
        entity:
          multiple: true
          domain: light
    time:
      name: Time
      description: Time to turn off the light
      default: "00:00:30"
      selector:
        time: {}
    buttons:
      name: Buttons
      description: List of buttons to use
      selector:
        entity:
          multiple: true
          domain: sensor
    button_hold_time:
      name: Button Time
      description: Time to turn off the light when button is single pressed
      default: "00:00:01"
      selector:
        time: {}
trigger:
  - platform: state
    id: motion
    entity_id: !input motion_sensors
  - platform: state
    id: door
    entity_id: !input door_sensors
  - platform: state
    id: button
    entity_id: !input buttons
    to: "single"
  - platform: event
    id: timerfinished
    event_type: timer.finished
    event_data:
      entity_id: !input timer
  - platform: event
    id: timerstarted
    event_type: timer.started
    event_data:
      entity_id: !input timer

action:
  choose:
    - conditions:
        - condition: trigger
          id:
            - motion
            - door
      sequence:
        - service: light.turn_on
          target:
            entity_id: !input lights
        - repeat:
            sequence:
              - service: timer.start
                data:
                  duration: !input time
                target:
                  entity_id: !input timer
            until:
              - condition: template
                value_template: "{{ is_state(trigger.entity_id, 'off') }}"
    - conditions:
        - condition: trigger
          id: timerfinished
      sequence:
        - service: light.turn_off
          target:
            entity_id: !input lights
    - conditions:
        - condition: trigger
          id: button
      sequence:
        - service: light.turn_on
          target:
            entity_id: !input lights
        - service: timer.start
          data:
            duration: !input button_hold_time
          target:
            entity_id: !input timer
